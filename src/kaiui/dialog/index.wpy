<style lang="less" src="../../less/font.less"></style>
<style lang="less" src="./index.less"></style>
<template>
  <view class="dialog {{ dialog.show ? 'dialog-show' : '' }} {{ out ? 'dialog-out' : '' }}">
    <view class="dialog-mask" catchtouchmove="return false"></view>
    <view class="dialog-container">
      <view
      wx:if="{{ dialog.title }}"
      class="dialog-header" catchtouchmove="return false">{{ dialog.title }}</view>
      <view class="content-container" catchtouchmove="return false">
        <view
        class="dialog-content {{ dialog.title ? 'dialog-content-title' : '' }}">{{ dialog.content }}</view>
      </view>
      <view
      class="dialog-footer {{ dialog.showVertical ? 'dialog-footer-vertical' : 'dialog-footer-horizon' }}">
      <repeat for="{{dialog.buttons}}" index="index" item="item" key="key">
        <button
        class="dialog-button btn btn-loading"
        catchtap="btnTap({{index}})"
        style="color: {{ item.color || '#333' }}">
          <loading type="circle" class="black" wx:if="{{item.sync && showSync}}"/>
          {{ item.text }}
        </button>
      </repeat>
    </view>
  </view>
</view>
</template>
<script>
import wepy from 'wepy'
import loading from '../loading/index'

export default class Dialog extends wepy.component {
  data = {
    dialog: {
      show: false,
      title: '',
      content: '',
      showVertical: false,
      type: '',
      buttons: []
    },
    resolve: '',
    reject: '',
    out: false,
    showSync: false
  }

  components = {
    loading: loading
  }

  methods = {
    btnTap (index) {
      const {dialog, showSync} = this
      if (showSync) {
        return
      }
      this.resolve(index)
      if (dialog.buttons[index].sync) {
        this.showSync = true
      } else {
        this.methods.resetDialog.call(this)
      }
    },
    resetDialog () {
      this.out = true
      setTimeout(() => {
        this.out = false
        this.dialog = {
          title: '标题',
          content: '内容',
          showVertical: false,
          type: 'base',
          buttons: [{text: '取消'}, {text: '确定', color: '#3CC51F'}],
          show: false
        }
        this.$apply()
      }, 300)
    }
  }

  reset () {
    this.showSync = false
    this.methods.resetDialog.call(this)
  }

  show (options) {
    return new Promise((resolve, reject) => {
      this.showSync = false
      this.out = false
      this.dialog = {
        title: options.title ? options.title : '提示',
        content: options.content ? options.content : '内容',
        showVertical: options.showVertical ? options.showVertical : false,
        type: options.type ? options.type : 'base',
        buttons: options.type === 'alert' ? [{text: '确定', color: '#3CC51F'}] : (options.type === 'muti' ? options.buttons : [{text: '取消'}, {text: '确定', color: '#3CC51F'}]),
        show: true
      }
      this.resolve = resolve
      this.reject = reject
      this.$apply()
    })
  }
}
</script>
