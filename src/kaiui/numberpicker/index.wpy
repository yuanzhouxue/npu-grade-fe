<style lang="less" src="./index.less"></style>
<template>
  <view class="numberpicker {{config.size}}">
    <view
      class="numberpicker-minus {{num <= config.min ? 'numberpicker-disabled':''}}"
      data-type="minus"
      data-num="{{num}}"
      data-config="{{config}}"
      data-disabled="{{num <= config.min}}"
      @tap="_handleStep"
      >-</view>
    <input
      class="numberpicker-input"
      type="number"
      value="{{num?num:''}}"
      data-num="{{num}}"
      data-config="{{config}}"
      @input="_handleInput"
      @blur="_handleBlur"/>
    <view
      class="numberpicker-plus {{num >= config.max ? 'numberpicker-disabled':''}}"
      data-type="plus"
      data-num="{{num}}"
      data-config="{{config}}"
      data-disabled="{{num >= config.max}}"
      @tap="_handleStep"
      >+</view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  export default class NumberPicker extends wepy.component {
    props = {
      config: {
        type: Object,
        // 赋默认值
        coerce (conf) {
          const c = conf || {}
          return {
            step: c.step || 1,
            min: c.min || 1,
            max: c.max || 999999999
          }
        }
      },
      num: { // 数值
        type: [Number, String],
        default: '',
        twoWay: true // 对数组repeat的情况无效，此时需要回调函数手动同步
      },
      index: { // 索引
        type: [Number, String],
        default: ''
      }
    }

    methods = {
      _handleStep (e) {
        const dataset = e.currentTarget.dataset
        const dataConfig = dataset.config
        if (!dataset.disabled) {
          let originalNum = dataset.num
          if (this.verify(originalNum, dataConfig)) {
            let num = dataset.type === 'plus' ? originalNum + Math.ceil(dataConfig.step) : originalNum - Math.ceil(dataConfig.step)
            // 处理类似如下情况：step:2,max:3,originalNum2+2=4>3,此时需要重置到3
            this.num = num > dataConfig.max || num < dataConfig.min ? originalNum : num
            this.handleStepChange(dataConfig.callbackFn)
          }
        }
      },
      _handleInput (e) {
        const dataset = e.currentTarget.dataset
        const dataConfig = dataset.config
        this.num = +e.detail.value
        this.handleStepChange(dataConfig.callbackFn)
      },
      _handleBlur (e) {
        const dataset = e.currentTarget.dataset
        const dataConfig = dataset.config
        if (this.verify(dataset.num, dataConfig)) {
          let num = +e.detail.value
          this.num = num < dataConfig.min ? dataConfig.min : (dataConfig.max && num > dataConfig.max ? dataConfig.max : num)
          this.handleStepChange(dataConfig.callbackFn)
        }
      }
    }

    handleStepChange (callbackFn) {
      callbackFn && this.$emit(callbackFn, Number(this.num), this.index)
    }

    verify (num, config) {
      if (!num && num !== 0) {
        console.error('props "num" is null')
        return false
      }
      if (!config) {
        console.error('props "config" is null')
        return false
      }
      return true
    }
  }
</script>
